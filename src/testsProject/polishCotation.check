#test postfixSimpleTest_1
    char postfix[1000];
    int error = infixToPostfix("sin(cos(67.235^0.24%12.23))", postfix);
    ck_assert_int_eq(error, 0);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 0);
    ck_assert_double_eq_tol(result, sin(cos(fmod(pow(67.235, 0.24), 12.23))), 1e-7);

#test postfixSimpleTest_2
    char postfix[1000];
    int error = infixToPostfix("23+(5*4)-13^3", postfix);
    ck_assert_int_eq(error, 0);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 0);
    ck_assert_double_eq(result, -2154);

#test postfixErrorTest_1
    char postfix[1000];
    int error = infixToPostfix("23^4)", postfix);
    ck_assert_int_eq(error, 1);
    
#test postfixErrorTest_2
    char postfix[1000];
    int error = infixToPostfix("sin((2.3", postfix);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_3
    char postfix[1000];
    int error = infixToPostfix("maximins(x)", postfix);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_4
    char postfix[1000];
    int error = infixToPostfix("sin + tan", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_5
    char postfix[1000];
    int error = infixToPostfix("sin(x)", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_6
    char postfix[1000];
    int error = infixToPostfix("23$3", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_7
    char postfix[1000];
    int error = infixToPostfix("---", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_8
    char postfix[1000];
    int error = infixToPostfix("+++", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_9
    char postfix[1000];
    int error = infixToPostfix("8889.23 -", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_10
    char postfix[1000];
    int error = infixToPostfix("2 +", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_11
    char postfix[1000];
    int error = infixToPostfix("33.02 *", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_12
    char postfix[1000];
    int error = infixToPostfix("90 /", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);
    
#test postfixErrorTest_13
    char postfix[1000];
    int error = infixToPostfix("98 %", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_14
    char postfix[1000];
    int error = infixToPostfix("^", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_15
    char postfix[1000];
    int error = infixToPostfix("1978 ^", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixComplexTest
    char postfix[1000];
    int error = infixToPostfix("-cos((-cos(x)+sin(x)+tan(x))*acos(0.33)-sqrt(4.2465)/log(2334.24)+ln(23.34)+atan(35.5452)-asin(0.2)--12%2++12.25)--12.23345", postfix);
    ck_assert_int_eq(error, 0);
    double result;
    error = processPostfix(postfix, 0.27, &result);
    ck_assert_int_eq(error, 0);
    ck_assert_double_eq(result, result);