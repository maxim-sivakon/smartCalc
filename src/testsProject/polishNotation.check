#test postfixSimpleTest_1
    char postfix[1000];
    int error = infixToPostfix("2^2^3", postfix);
    ck_assert_int_eq(error, 0);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 0);
    ck_assert_double_eq_tol(result, 256, 1e-7);

#test postfixSimpleTest_2
    char postfix[1000];
    int error = infixToPostfix("98+((9-11)*4)-2^3", postfix);
    ck_assert_int_eq(error, 0);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 0);
    ck_assert_double_eq(result, 82);

#test postfixErrorTest_1
    char postfix[1000];
    int error = infixToPostfix("31^3)", postfix);
    ck_assert_int_eq(error, 1);
    
#test postfixErrorTest_2
    char postfix[1000];
    int error = infixToPostfix("sin((2.3", postfix);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_3
    char postfix[1000];
    int error = infixToPostfix("testtextf(x)", postfix);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_4
    char postfix[1000];
    int error = infixToPostfix("sin + tan", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_5
    char postfix[1000];
    int error = infixToPostfix("sin(x)", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_6
    char postfix[1000];
    int error = infixToPostfix("23$3", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_7
    char postfix[1000];
    int error = infixToPostfix("---", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_8
    char postfix[1000];
    int error = infixToPostfix("+++---", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_9
    char postfix[1000];
    int error = infixToPostfix("3672.33 -", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_10
    char postfix[1000];
    int error = infixToPostfix("19 +", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_11
    char postfix[1000];
    int error = infixToPostfix("367263.345 *", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_12
    char postfix[1000];
    int error = infixToPostfix("777 /", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);
    
#test postfixErrorTest_13
    char postfix[1000];
    int error = infixToPostfix("1998 %", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_14
    char postfix[1000];
    int error = infixToPostfix("^", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixErrorTest_15
    char postfix[1000];
    int error = infixToPostfix("2004 ^", postfix);
    double result;
    error = processPostfix(postfix, NAN, &result);
    ck_assert_int_eq(error, 1);

#test postfixComplexTest
    char postfix[1000];
    int error = infixToPostfix("-sin((-cos(x)+tan(x))*acos(0.5)-sqrt(0.2465)/log(13.24)+ln(123.34)+atan(915.5452)-asin(0.1)--2%12++90.25)--12.23345", postfix);
    ck_assert_int_eq(error, 0);
    double result;
    error = processPostfix(postfix, 0.27, &result);
    ck_assert_int_eq(error, 0);
    ck_assert_double_eq(result, result);